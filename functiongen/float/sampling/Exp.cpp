#include "PolySynth.h"
#include "Elementary.h"

double exp2JBy64[64] = {
    1.000000000000000000000000000000000000000000000000000000000000,
    1.010889286051700475255188393930438905954360961914062500000000,
    1.021897148654116627142229845048859715461730957031250000000000,
    1.033024879021228414899269409943372011184692382812500000000000,
    1.044273782427413754803069423360284417867660522460937500000000,
    1.055645178360557157049015586380846798419952392578125000000000,
    1.067140400676823697168060789408627897500991821289062500000000,
    1.078760797757119860307284398004412651062011718750000000000000,
    1.090507732665257689674831453885417431592941284179687500000000,
    1.102382583307840890896045493718702346086502075195312500000000,
    1.114386742595892432206028388463892042636871337890625000000000,
    1.126521618608241848136231055832467973232269287109375000000000,
    1.138788634756691564575703523587435483932495117187500000000000,
    1.151189229952982673310657446563709527254104614257812500000000,
    1.163724858777577475521525229851249605417251586914062500000000,
    1.176396991650281220742613186303060501813888549804687500000000,
    1.189207115002721026897347655904013663530349731445312500000000,
    1.202156731452703075646581964974757283926010131835937500000000,
    1.215247359980468955242827178153675049543380737304687500000000,
    1.228480536106870024681825270818080753087997436523437500000000,
    1.241857812073484002013401550357230007648468017578125000000000,
    1.255380757024691096290780478739179670810699462890625000000000,
    1.269050957191733219886486949690151959657669067382812500000000,
    1.282870016078778263590720598585903644561767578125000000000000,
    1.296839554651009640551251322904136031866073608398437500000000,
    1.310961211524764413738353141525294631719589233398437500000000,
    1.325236643159741323216849195887334644794464111328125000000000,
    1.339667524053302916087204721407033503055572509765625000000000,
    1.354255546936892651288530942110810428857803344726562500000000,
    1.369002422974590515991621941793709993362426757812500000000000,
    1.383909881963832022577776115213055163621902465820312500000000,
    1.398979672538311236351660227228421717882156372070312500000000,
    1.414213562373095145474621858738828450441360473632812500000000,
    1.429613338391970023266708267328795045614242553710937500000000,
    1.445180806977046650274587591411545872688293457031250000000000,
    1.460917794180647044655074751062784343957901000976562500000000,
    1.476826145939499346226853049302008002996444702148437500000000,
    1.492907728291264835007723377202637493610382080078125000000000,
    1.509164427593422841411552326462697237730026245117187500000000,
    1.525598150744538417100670812942553311586380004882812500000000,
    1.542210825407940744113943765114527195692062377929687500000000,
    1.559004400237836929221657555899582803249359130859375000000000,
    1.575980845107886496592186631460208445787429809570312500000000,
    1.593142151342266998881314066238701343536376953125000000000000,
    1.610490331949254283472328097559511661529541015625000000000000,
    1.628027421857347833977769369084853678941726684570312500000000,
    1.645755478153964945775555861473549157381057739257812500000000,
    1.663676580326736376136409489845391362905502319335937500000000,
    1.681792830507429004072150746651459485292434692382812500000000,
    1.700106353718523477525081943895202130079269409179687500000000,
    1.718619298122477934143148559087421745061874389648437500000000,
    1.737333835273706217350309088942594826221466064453125000000000,
    1.756252160373299453510753664886578917503356933593750000000000,
    1.775376492526521188253241234633605927228927612304687500000000,
    1.794709075003107168200244814215693622827529907226562500000000,
    1.814252175500398855945149989565834403038024902343750000000000,
    1.834008086409342430656010947132017463445663452148437500000000,
    1.853979125083385470773578163061756640672683715820312500000000,
    1.874167634110299962557633079995866864919662475585937500000000,
    1.894575981586965607306183301261626183986663818359375000000000,
    1.915206561397147400072071832255460321903228759765625000000000,
    1.936061793492294347274196297803428024053573608398437500000000,
    1.957144124175400179410644341260194778442382812500000000000000,
    1.978456026387950927869496808853000402450561523437500000000000
};

template <>
float Elementary<float>::MpfrCalculateFunction(float x) {
    return (float)exp((double)x);
}

template <>
bool Elementary<float>::ComputeSpecialCase(float x, float& res) {
    floatX fx;
    fx.f = x;
    if (fx.f <= -103.97283935546875) {
        res = 0.0;
        return true;
    }
    
    if (-2.98023223876953125e-08 <= fx.f &&
        fx.f <= 5.9604641222676946199499070644378662109375e-08) {
        res = 1.0;
        return true;
    }
    
    if (88.72283935546875 <= fx.f) {
        res = 1.0/0.0;
        return true;
    }
    
    if ((fx.x & 0x7FFFFFFF) > 0x7F800000) {
        res = 0.0/0.0;
        return true;
    }
    
    return false;
}

template <>
double Elementary<float>::RangeReduction(float x, double& modifier) {
    double xp = x * 92.332482616893656768297660164535045623779296875;
    int N = (int)xp;
    int N2 = N % 64;
    if (N2 < 0) N2 += 64;
    int N1 = N - N2;
    
    int M = N1 / 64;
    int J = N2;
    double R = x - N *
    0.01083042469624914509729318723429969395510852336883544921875;
    
    modifier = ldexp(exp2JBy64[J], M);
    return R;
}
    
template <class T>
double Elementary<T>::RangePropagation(double yp, double modifier) {
    return yp * modifier;
}

template <class T>
double Elementary<T>::ReverseRangePropagation(double y, double modifier) {
    return y / modifier;
}

template <class T>
bool Elementary<T>::FlipLbAndUb(double y) {
    return false;
}

int main(int argc, char** argv) {
    
    PolySynth<float, Elementary<float>> fp32exp;
    
    std::map<double, unique_ptr<MapData>> redInts =
    fp32exp.CalcSomeIntervalsUsingMap(864026623, 865026623);
    
    FILE* f = fopen("testfile", "w");
    
    int count = 0;
    for (std::map<double, unique_ptr<MapData>>::iterator iter = redInts.begin();
         iter != redInts.end(); iter++) {
        // Take doubles, turn it into 8byte data:
        fwrite((char*)&iter->first, sizeof(char), sizeof(double), f);
        fwrite((char*)&iter->second->lb, sizeof(char), sizeof(double), f);
        fwrite((char*)&iter->second->ub, sizeof(char), sizeof(double), f);
        count++;
        if (count % 1000 == 0) printf("%d\r", count);
    }
    
    printf("\n");
    fclose(f);
    
    f = fopen("testfile", "r");
    for (std::map<double, unique_ptr<MapData>>::iterator iter = redInts.begin();
         iter != redInts.end(); iter++) {
        // Read 3 doubles:
        double data[3];
        fread(data, sizeof(double), 3, f);
        if (data[0] != iter->first ||
            data[1] != iter->second->lb ||
            data[2] != iter->second->ub) {
            printf("uh oh\n");
        }
        
        printf("x  = %.100e\n", data[0]);
        printf("lb = %.100e\n", data[1]);
        printf("ub = %.100e\n", data[2]);
    }
    
    
    fclose(f);

    return 0;
}
